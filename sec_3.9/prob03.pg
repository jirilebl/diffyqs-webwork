# Linear systems: Nonhomogeneous linear systems

## Institution(Fort Lewis College)
## Author(Paul Pearson)
## KEYWORDS('Nonhomogeneous linear systems')


##################################
#  Initialization


DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "PGmatrixmacros.pl",
  "MathObjects.pl",
  "AnswerFormatHelp.pl",
  "parserMultiAnswer.pl",
  "PGcourse.pl"
);

TEXT(beginproblem());


##################################
#  Setup

Context("Numeric");
Context()->variables->are(
t=>"Real"
);
Context()->variables->set(t=>{limits=>[-2,2]});

# Eigenvectors:  <1,1>, <1,-1>
# Eigenvalues:    -1,      1

#  The matrix for the system
$A11 =  0;  $A12 = -1;
$A21 = -1;  $A22 =  0; 


# Redefine true eigenvalues of matrix A
$lambda1 = -1;
$lambda2 = 1;


 

#########################################
#  Homogeneous (complementary) solution

# Correct complementary solution
$yc1top = Compute("e^(-t)");
$yc1bot = Compute("e^(-t)");

$yc2top = Compute("e^(t)");
$yc2bot = Compute("-e^(t)");


$multians1 = MultiAnswer($yc1top, $yc1bot, $yc2top, $yc2bot)->with(

    singleResult => 1,
    checkTypes => 0,
    allowBlankAnswers => 1,
    format =>  
    "<table border='0' cellspacing='0'>
    <tr>
      <td><table border='0' cellspacing='5'><tr><td> %s </td></tr><tr><td> %s </td></tr></table></td>
      <td>&nbsp;&nbsp;</td>
      <td><table border='0' cellspacing='5'><tr><td> %s </td></tr><tr><td> %s </td></tr></table></td>
    </tr>
    </table>",
    tex_format =>  
    "\left\lbrack \begin{array}{r} %s \\ %s \end{array}\right\rbrack, \ \ 
     \left\lbrack \begin{array}{r} %s \\ %s \end{array}\right\rbrack",

    checker => sub {
        my ($correct, $student, $answerHash ) = @_;
        my @c = @{$correct};
	my @s = @{$student};

        my $flag1 = 0;
        my $flag2 = 0;

        Value::Error("Your solutions are not linearly independent") if
        $c[0]->typeMatch($s[0]) &&
        $c[1]->typeMatch($s[1]) &&
        $c[2]->typeMatch($s[2]) &&
        $c[3]->typeMatch($s[3]) &&
        ($s[0] * $s[3] == $s[1] * $s[2]);

        if ( $c[0]->typeMatch($s[0]) && 
             $c[1]->typeMatch($s[1]) && 
             ($s[0] != 0 || $s[1] != 0) ) 
        {
          if ( ($A11 * $s[0] + $A12 * $s[1] == $s[0]->D('t')) &&
               ($A21 * $s[0] + $A22 * $s[1] == $s[1]->D('t')) 
          ){
                $flag1=1;
          }
        }

        if ( $c[2]->typeMatch($s[2]) && 
             $c[3]->typeMatch($s[3]) && 
             ($s[2] != 0 || $s[3] != 0) ) 
        {
          if ( ($A11 * $s[2] + $A12 * $s[3] == $s[2]->D('t')) &&
               ($A21 * $s[2] + $A22 * $s[3] == $s[3]->D('t')) 
          ){
                $flag2=1;
          }
        }

        if ($flag1==1 && $flag2 ==1){
           return 1;
        } elsif ($flag1 == 1) {
           Value::Error("The vector on the left is correct");
        } elsif ($flag2 == 1) {
           Value::Error("The vector on the right is correct");
        }else{
           Value::Error("Neither of the vectors is correct");
        }
       
    }
);



#############################################
#  Particular solution

# Random entry in nonhomogeneous part
$r = 2; # list_random(2);
$den = ($r)**2 - 1;

# Guess solution of the form \vec{a} e^($rt) + \vec{b} t + \vec{c}

$yptop = Compute("-e^($r t) / $den - 1");
$ypbot = Compute("$r e^($r t) / $den + t");

$multians2 = MultiAnswer( $yptop, $ypbot )->with(

    singleResult => 1,
    checkTypes => 0,
    allowBlankAnswers => 1,
    format =>  "<table border='0' cellspacing='5'>
    <tr><td> %s </td></tr>
    <tr><td> %s </td></tr>
    </table>",
    tex_format =>  "\left\lbrack\begin{array}{rr} %s \\\\ %s \end{array}\right\rbrack",

    checker => sub {
        my ($correct, $student, $answerHash ) = @_;
        my @c = @{$correct};
	my @s = @{$student};
        my @score = ();

        foreach my $i (0..1) {
          if ( $c[$i]->typeMatch($s[$i]) && $c[$i] == $s[$i] ) { 
             $score[$i] = 1; 
          } else { 
             $score[$i] = 0; 
          }
        }

        if ($score[0] == 1 && $score[1] == 1) {
           return 1;
        } elsif ($score[0] == 1) {
           Value::Error('The top entry is correct');
        } elsif ($score[1] == 1) {
           Value::Error('The bottom entry is correct');
        } else {
           Value::Error('Neither entry is correct');
        }

   }
);



#########################################
#  IVP solution

# Initial conditions
$init1 = random(0,1,1);
$init2 = random(0,1,1);

$c1 = Real("0.5 * ( ($init1 + 1 / $den + 1) - ($init2 - $r / $den) )");
$c2 = Real("0.5 * ( ($init1 + 1 / $den + 1) + ($init2 - $r / $den) )");


#IVP solution

$y1ivp = Compute(" $c1 e^t + $c2 e^(-t) - e^($r t) / $den - 1")->with(
  tolType => 'absolute',
  tolerance => .01,
);
$y2ivp = Compute("- $c1 e^t + $c2 e^(-t) + $r e^($r t) / $den + t")->with(
  tolType => 'absolute',
  tolerance => .01,
);
#$y2ivp->{limits} = [0.25,0.75];

$multians3 = MultiAnswer( $y1ivp, $y2ivp )->with(

    singleResult => 1,
    checkTypes => 0,
    allowBlankAnswers => 1,
    format =>  "<table border='0' cellspacing='5'>
    <tr><td> %s </td></tr>
    <tr><td> %s </td></tr>
    </table>",
    tex_format =>  "\left\lbrack\begin{array}{rr} %s \\\\ %s \end{array}\right\rbrack",

    checker => sub {
        my ($correct, $student, $answerHash ) = @_;
        my @c = @{$correct};
	my @s = @{$student};
        my @score = ();

        Value::Error('Answers should be non-constant functions') unless 
           $c[0]->typeMatch($s[0])
        && $c[1]->typeMatch($s[1])
        && $s[0]->isFormula 
        && $s[1]->isFormula;

        foreach my $i (0..1) {
          if ( $c[$i]->typeMatch($s[$i]) && $c[$i] == $s[$i] ) { 
             $score[$i] = 1; 
          } else { 
             $score[$i] = 0; 
          }
        }

        if ($score[0] == 1 && $score[1] == 1) {
           return 1;
        } elsif ($score[0] == 1) {
           Value::Error('The top entry is correct');
        } elsif ($score[1] == 1) {
           Value::Error('The bottom entry is correct');
        } else {
           Value::Error('Neither entry is correct');
        }

   }
);



#######################################
#  Main text

Context()->texStrings;
BEGIN_TEXT

Consider the initial value problem
\[
\displaystyle
{\vec{x}^{\, \prime}}
=
\left\lbrack
\begin{array}{rr}
$A11 & $A12 \\
$A21 & $A22
\end{array} 
\right\rbrack
{\vec{x}}
+ \left\lbrack
\begin{array}{c}
t \\
e^{$r t}
\end{array} 
\right\rbrack, 
\quad \quad
{\vec{x}}(0)
= \left\lbrack
\begin{array}{c}
$init1 \\
$init2
\end{array} 
\right\rbrack.
\]

$PAR
Form the complementary solution to the homogeneous equation.
$PAR
\{ 
mbox(
[
' \( {\vec{x}}_c(t) = \alpha_1 \)', 
display_matrix([[$multians1->ans_rule(15)],[$multians1->ans_rule(15)]]),
' \( + \ \alpha_2 \) ', 
display_matrix([[$multians1->ans_rule(15)],[$multians1->ans_rule(15)]]),
],
allowbreaks=>'yes'
) 
\}
\{ AnswerFormatHelp("formulas") \}
\{ AnswerFormatHelp("matrices") \}

$PAR
Construct a particular solution by assuming 
the form \( {\vec{x}}_p(t) = {\vec{a}} e^{$r t} 
+ {\vec{b}} t + {\vec{c}} \) and solving for the undetermined 
constant vectors \( {\vec{a}}, {\vec{b}}, \) and 
\( {\vec{c}} \).
$PAR
\{ 
mbox(
[
'\( {\vec{x}}_p(t) = \)',
display_matrix([[$multians2->ans_rule(15)],[$multians2->ans_rule(15)]]),
$SPACE,
AnswerFormatHelp("formulas").$BR.AnswerFormatHelp("matrices")
],
allowbreaks=>'yes'
) 
\}

$PAR
Form the general solution \( {\vec{x}}(t) = 
{\vec{x}}_c(t) + {\vec{x}}_p(t) \) and 
impose the initial condition to obtain the solution of the 
initial value problem.
$PAR
\{
mbox(
[
display_matrix([['\( x_1(t) \)'],['\( x_2(t) \)']]),
'\( = \)',
display_matrix([[$multians3->ans_rule(50)],[$multians3->ans_rule(50)]]),
],
allowbreaks=>'yes'
)
\}
\{ AnswerFormatHelp("formulas") \}
\{ AnswerFormatHelp("matrices") \}

$PAR
$BITALIC $BBOLD Book: $EBOLD
\{ htmlLink("https://www.jirka.org/diffyqs/html/nonhomogsys_section.html", "Section 3.9 of Notes on Diffy Qs") \}
$EITALIC
END_TEXT
Context()->normalStrings;



###################################
#  Answer evaluation

$showPartialCorrectAnswers = 1;

ANS( $multians1->cmp() );
ANS( $multians2->cmp() );
ANS( $multians3->cmp() );

ENDDOCUMENT();
