##DESCRIPTION
## Finding eigenvalues and eigenfunctions of a Sturm-Liouville boundary value problem
## Requires some high precision decimal answers.
##ENDDESCRIPTION

## DBsubject(Differential equations)
## DBchapter(Higher order differential equations)
## DBsection(Boundary value problems)
## Institution(Alfred University)
## Author(Darwyn Cook)
## TitleText1('Notes on Diffy Qs: Differential Equations for Engineers')
## AuthorText1('Jiri Lebl')
## EditionText1('6')
## Section1('5.1')
## Problem1('')
## Level(4)
## MO(1)
## KEYWORDS('ODE', 'ordinary', 'differential', 'equation', 'boundary value problem', 'homogeneous', 'Sturm-Louiville', 'eigenvalue', 'eigenfunction')

########################################################################

DOCUMENT();      

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
#  "weightedGrader.pl",
  "parserMultiAnswer.pl",
  "PGgraphmacros.pl",
  "unionTables.pl",
  "parserRadioButtons.pl",
  "PGchoicemacros.pl",
  "PGcourse.pl"
);

#install_weighted_grader();
$refreshCachedImages=1;
# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#

Context("Numeric");
Context()->variables->add(A=>"Real",B=>"Real",lambda=>"Real");
Context()->variables->set(lambda=>{limits=>[0,4]});
Context()->variables->set(lambda => {TeX => '{\lambda}'});
Context()->strings->add(red=>{},blue=>{},green=>{},black=>{}); 
Context()->{error}{msg}{"String constant '0' is not defined in this context"} = "Can't grade next two boundary conditions without this";


$f = Formula("lambda*x")->reduce;

$L = Compute(random(2,9));

### Answer checker for diffeq. and boundary conditions ###

sub DEchecker {
   my ($lambda,$lambda_min, $lambda_max) = @_;
   return sub { 
      Context()->variables->set(lambda=>{limits=>[$lambda_min,$lambda_max]});
      my ( $correct, $student, $self ) = @_;
      my ( $fstu, $bdy0stu, $bdy1stu ) = @{$student};
      my $checkDE = 0;  # = 1 if the DE is satisfied with independent solutions
      my $check0 = 0;  # =1 if the first equation is a boundary condition
      my $check1 = 0; # = 1 if the second equation is the other boundary cond. 
      my ( $fcor, $bdy0cor, $bdy1cor ) = @{$correct};
      if (ref($fstu) == ref($fcor)){
	## compute the wronskiian ##
	my $dfA = $fstu->D('A')->substitute(x=>0);
	my $dfAx = $fstu->D('A','x')->substitute(x=>0);
	my $dfB = $fstu->D('B')->substitute(x=>0);
	my $dfBx = $fstu->D('B','x')->substitute(x=>0);
	my $wronskiian = $dfA*$dfBx-$dfB*$dfAx;
	## check that the DE is satisfied and wronskiian isn't 0 ##
	if ( (($fstu->D('x','x'))+$lambda*$fstu) == Formula("0")  and 
	      $wronskiian != Formula("0")  ){ 
	   $checkDE = 1;
	}
      }
      if ( ref($bdy0stu) == ref($bdy0cor) and ref($bdy0stu) == ref($bdy0cor)) {
	# check the boundary conditions
	my $leftbdycond = $fstu->D('x')->substitute(x=>0);
	my $rightbdycond = ($fstu + ($fstu->D('x')))->substitute(x=>$L);
	if ($checkDE == 1 and $leftbdycond == $bdy0stu) {
	   $check0 = 1;
	   if ($checkDE == 1 and $rightbdycond == $bdy1stu ){
	     $check1 = 1;
	   }   
	} 
	elsif ($checkDE == 1 and $rightbdycond == $bdy0stu ){
	   $check0 = 1;
	   if ($checkDE == 1 and $leftbdycond == $bdy1stu) {
	     $check1 = 1;
	   }
	}
	elsif ( $checkDE == 1 and 
	  ( $rightbdycond == $bdy1stu or 
	    $leftbdycond == $bdy1stu 
	  ) ) {$check1 = 1;} 
      }
      return [$checkDE,$check0,$check1];
    };
};


#### answer checker for eigenfunction given a specific eigenvalue ###

sub eigenfunctionChecker {
  my ($lambda, $xmax) = @_;  # eigenvalue, right hand boundary
  return sub {
    my ($stu, $corr, $ans_hash) = @_; 
    if ( $stu == Formula(0) ) { return 0;}  # reject the zero function
    my $df = $stu->D('x');
    ## the differential equation ##
    my $DE = ($df->D('x')) + $lambda*$stu ;
    ## boundary conditions ##
    my $bdy0 = $df->eval(x => 0); 
    my $bdy1 = ($stu+$df) -> eval(x => $xmax);
    if ( $DE == Formula(0) and $bdy0 == Compute(0) and $bdy1 == Compute(0) ){
       return 1;
    }
    else { return 0; }
  }
}


#################################
#  The question has three parts
# 
#  Part 1 lambda = 0.
##########

$equalzero = Formula("A+B*x");
$equalzero_boundary0 = Formula("B");
$equalzero_boundaryL = Formula("A+$L*B+B");
$equalzero_ans = MultiAnswer($equalzero, $equalzero_boundary0, $equalzero_boundaryL)->with(
  singleResult => 0,
  allowBlankAnswers => 1,
  checker => DEchecker(0,-2,2)
);


Context()->texStrings;
BEGIN_TEXT
In this problem we find the eigenfunctions and eigenvalues of the differential equation
\[\frac{d^2y}{dx^2} + \lambda y = 0\]
on the interval \(0\leq x \leq $L\) with boundary values
\[
y^\prime(0) = 0\hspace{20pt} y($L)+y^\prime($L) = 0
\]
$PAR
For the general solution of the differential equation in the following cases use A and B for your constants, for example \(y = A\cos (x) + B\sin(x)\). For the variable \(\lambda\) type the word lambda, otherwise treat it as you would any other variable.
$PAR
$BBOLD Case 1: $EBOLD \(\lambda = 0\)
$PAR
(1a.) Ignoring the boundary conditions for a moment, the general solution for the differential equation is 
$BR
$BCENTER
\(y(x) = \)\{$equalzero_ans->ans_rule\}. 
$ECENTER
$PAR 
Apply the boundary conditions to the general solution to obtain two equations relating \(A\) to \(B\):
$BCENTER
$BR
\{$equalzero_ans->ans_rule\} = \(0\)
$BR
\{$equalzero_ans->ans_rule\} = \(0\)
$ECENTER
$BR
(1b.) Solving this system for A and B we get
$BCENTER
$BR
A = \{ans_rule\} 
$BR
B = \{ans_rule\}
$ECENTER
END_TEXT

Context()->normalStrings;

ANS($equalzero_ans->cmp());
ANS(Compute(0)->cmp());
ANS(Compute(0)->cmp());

########################
#
#  Part 2 lambda < 0
############################

Context()->variables->set(lambda=>{limits=>[-4,-.1]});

$lesszero = Formula("A*cosh(sqrt(-lambda)x)+B*sinh(sqrt(-lambda)x)");
$lessprime = $lesszero->D('x');
$lesszero_boundary0 = $lessprime->substitute(x=>0);
$lesszero_boundaryL = ($lesszero+$lessprime)->substitute(x=>$L);
$lambda = Formula("lambda");

$lesszero_ans = MultiAnswer($lesszero, $lesszero_boundary0, $lesszero_boundaryL)->with(
  singleResult => 0,
  allowBlankAnswers =>1,
  checker => DEchecker($lambda, -4, -.1)
);

Context()->variables->set(lambda=>{limits=>[-4,-.1]});
$sqrtminuslambda = Formula("-coth($L*sqrt(-lambda))");

################
##
## Graphs
##
##

@func = (Formula("-coth($L*sqrt(-x))"),Formula("-cot($L*sqrt(-x))"),Formula("-coth(-x)"),Formula("-x"));
#
#  Graph size
#
($xm,$xM) = (-5,1);
$ym = -5;
$yM=-$ym;
@size = (250,250);

###################

#
#  The plot defaults
#
@Goptions = (
  $xm,$ym,$xM,$yM,                            # dimensions of graph
  axes => [0,0], grid => [$xM-$xm,$yM-$ym],   # number of grid lines
  size => [$size[0],$size[1]]                               # pixel dimension
);

$plotdomain  = "x in <$xm,$xM>";
$plotoptions = "using color:red and weight=2";

#
#  Set up the question and answer list
#
@QA = ();
for my $i (0 .. $#func){
  $gr[$i] = init_graph(@Goptions);
  my ($plot) = plot_functions($gr[$i],"$func[$i] for $plotdomain $plotoptions");
  $plot->steps(150);
  add_functions($gr[$i], "sqrt(-x) for x in <$xm,0> using color:blue and weight=2");
  $fig[$i]=image(insertGraph($gr[$i]),
  width=>$size[0],height=>$size[1],tex_size=>200);
} 
$count = $#func+1;
@perm = shuffle($count); #deprecated


@fig = @fig[@perm];
@inv = invert(@perm);

@letter = ("A","B","C","D");
#@correct = ( $letter[$perm[0]]);

$mc = RadioButtons(
  ["A","B","C","D"],
  "$letter[$inv[0]]"
); 

Context()->texStrings;
BEGIN_TEXT
$BR
$BBOLD Case 2: $EBOLD \(\lambda < 0\)
$PAR
(2a.) Ignoring the boundary conditions for a moment, the general solution is 
$BR
$BCENTER
\(y(x)=\)\{$lesszero_ans->ans_rule(70)\}. 
$ECENTER
$PAR
Apply the boundary conditions to obtain two equations relating \(A\) to \(B\):
$BCENTER
$BR
\{$lesszero_ans->ans_rule(95)\} = \(0\)
$BR
\{$lesszero_ans->ans_rule(95)\} = \(0\)
$ECENTER
$BR
(2b.) If \(A\) and \(B\) are not both zero then, solving these two equations, one can eliminate both \(A\) and \(B\) and derive the following formula for \(\sqrt{-\lambda}\) in terms of hyperbolic functions (\(\cosh, \sinh, \tanh, \coth\), etc.). 
$BCENTER
\(\sqrt{-\lambda} = \)\{ans_rule\} 
$ECENTER
$BR
(2c.) Choose the graph of \(\sqrt{-\lambda}\) and \(-\coth\left($L\sqrt{-\lambda}\right)\)
$BR
\{$mc->buttons()\}
$BR
$BCENTER
\{
BeginTable().
  AlignedRow([$fig[0],$fig[1],$fig[2],$fig[3]]).
  TableSpace(5,0).
  AlignedRow(["A","B","C","D"]).
EndTable();
\}
$ECENTER
$BR

$BR
From the graph there are  \{ans_rule(5)\} nonzero eigenvalues for \(\lambda\),
Sturm-Loiuville guarantees infinitely many eigenvalues, so we go on.
$PAR
END_TEXT

Context()->normalStrings;

ANS($lesszero_ans->cmp());
ANS($sqrtminuslambda->cmp());
ANS( $mc->cmp());
ANS(Compute(0)->cmp()); 

#####  Part 3  lambda > 0 #########
#
##################

Context()->variables->set(lambda=>{limits=>[.1,4]});

$greaterzero = Formula("A*cos(sqrt(lambda)x)+B*sin(sqrt(lambda)x)");
$greaterprime = $greaterzero->D('x');
$greaterzero_boundary0 = $greaterprime->substitute(x=>0);
$greaterzero_boundaryL = ($greaterzero+$greaterprime)->substitute(x=>$L);

$lamba=Formula("lambda");

$greaterzero_ans = MultiAnswer($greaterzero, $greaterzero_boundary0, $greaterzero_boundaryL)->with(
  singleResult => 0,
  allowBlankAnswers => 1,
  checker => DEchecker($lambda, .1, 4)
);

Context()->variables->set(lambda=>{limits=>[.1,4]});
$sqrtlambda = Compute("cot($L*sqrt(lambda))");

#############################################################################
####
####
#### Eigenvalues
####
####

Context()->{format}{number} = "%.10f#";   # format numbers as 10-place decimals, but remove trailing zeros, if any.

@trigeigen=([0,0,0,0],
[0,0,0,0],
[0.289914395598769,3.31895007961760,10.8186186747682,23.1821081013016],
[0.157995339962490,1.61185218248922,4.99366922706934,10.5063011508240],
[0.0999494901357594,0.967843577173318,2.90192105979624,6.01705953830808],
[0.0690467818111709,0.650786764770726,1.90970056224427,3.91466213259093],
[0.0505914673333746,0.469594456261945,1.35813843323195,2.75929277167759],
[0.0386748769374690,0.355665327157603,1.01837815867693,2.05468235361620],
[0.0305295074047841,0.279095900011021,0.793498141714816,1.59230187467826],
[0.0247141205540882,0.225038958222363,0.636548525037141,1.27192953213693]);

$trigeigenlist = List($trigeigen[$L]);

$eigenfunction = Formula("cos(sqrt(lambda)*x)");

$eigen1 = $eigenfunction->substitute(lambda=>$trigeigen[$L][0]);
$eigen2 = $eigenfunction->substitute(lambda=>$trigeigen[$L][1]);
$eigen3 = $eigenfunction->substitute(lambda=>$trigeigen[$L][2]);
$eigen4 = $eigenfunction->substitute(lambda=>$trigeigen[$L][3]);


@Goptions = (
  -1,$ym,$L+1,$yM,                            # dimensions of graph
  axes => [0,0], grid => [$L+2,$yM-$ym],   # number of grid lines
  size => [$size[0],$size[1]]                               # pixel dimension
);

$plotdomain  = "x in <0,$L>";
@color = ("black","red","green","blue");
@perm = shuffle(4);
@color = @color[@perm];

$greigen = init_graph(@Goptions);
my ($plot) = plot_functions($greigen,"$eigen1 for $plotdomain using color:$color[0] and weight=2");
add_functions($greigen, "$eigen2 for $plotdomain using color:$color[1] and weight=2");
add_functions($greigen, "$eigen3 for $plotdomain using color:$color[2] and weight=2");
add_functions($greigen, "$eigen4 for $plotdomain using color:$color[3] and weight=2");
$plot->steps(150);
$figeigen=image(insertGraph($greigen),width=>$size[0],height=>$size[1],tex_size=>450);

$order = List(String("$color[0]"),String("$color[1]"),String("$color[2]"),String("$color[3]"));


Context()->texStrings;
BEGIN_TEXT
$BBOLD Case 3: $EBOLD \(\lambda > 0\)
$PAR
(3a.) Ignoring the boundary conditions, the general solution is $BR
$BCENTER
\(y(x) = \)\{$greaterzero_ans->ans_rule(70)\}. 
$ECENTER
$BR
Apply the boundary conditions to obtain two equations relating \(A\) to \(B\):
$BCENTER
$BR
\{$greaterzero_ans->ans_rule(90)\} = \(0\)
$BR
\{$greaterzero_ans->ans_rule(90)\} = \(0\)
$ECENTER
$BR
(3b.) Assuming \(A\) and \(B\) are not both zero then, solving these two equations, one can eliminate both \(A\) and \(B\) and derive the following formula for \(\sqrt{\lambda}\) in terms of trigonometric functions. 
$BR 
$BCENTER
\(\sqrt{\lambda} =\)\{ans_rule\} 
$ECENTER
$BR
(3c.) In increasing order, the first four eigenvalues from this equation are: $BR
\(\lambda = \)\{ans_rule(70)\}$BR  
(Your answers should be accurate to at least 7 decimal places.)
$PAR
List the first three eigenfunctions \(y_1(x), y_2(x), y_3(x)\) in order of increasing eigenvalues.  
$BR
\(y_1(x)=\)\{ans_rule(40)\}, $BR
\(y_2(x)=\)\{ans_rule(40)\}, $BR
\(y_3(x)=\)\{ans_rule(40)\}
$BR
Here are graphs of the first four eigenfunctions on \(\lbrack 0,$L \rbrack\).
$BR
\{$figeigen\}
$BR
List the functions, ordered by their eigenvalues in increasing order, by their color - green, red, blue, black: \{ans_rule(35)\}
$PAR
$BITALIC $BBOLD Book: $EBOLD
\{ htmlLink("https://www.jirka.org/diffyqs/html/slproblems_section.html", "Section 5.1 of Notes on Diffy Qs") \}
$EITALIC
END_TEXT

Context()->normalStrings;

ANS($greaterzero_ans->cmp());
ANS($sqrtlambda->cmp());
ANS($trigeigenlist->cmp(ordered=>1));

# check eigenfunctions up to a constant multiple

ANS( $eigen1->cmp( checker => eigenfunctionChecker($trigeigen[$L][0], $L) ));
ANS( $eigen2->cmp( checker => eigenfunctionChecker($trigeigen[$L][1], $L) ));
ANS( $eigen3->cmp( checker => eigenfunctionChecker($trigeigen[$L][2], $L) ));

ANS($order->cmp(ordered=>1));


##############################################################
#
#  Answers
#
#

### Case 1 equal zero - 20% of problem
#WEIGHTED_ANS($equalzero->cmp, 4);
#WEIGHTED_ANS(Compute("B")->cmp, 4);
#WEIGHTED_ANS(Compute("A+B*($L+1)")->cmp, 4);
#WEIGHTED_ANS(Compute("0")->cmp, 4);
#WEIGHTED_ANS(Compute("0")->cmp, 4);
#
### Case 2 less than zero - 40% of problem
#WEIGHTED_ANS($lesszero->cmp, 8);
#WEIGHTED_ANS(Formula($simplify,"B*sqrt(lambda)")->cmp, 8);
#WEIGHTED_ANS(Formula("(A+B*sqrt(lambda))*cosh(sqrt(lambda)*$L)+(B+A*sqrt(lambda))*sinh(sqrt(lambda)*$L)")->cmp, 8);
#WEIGHTED_ANS(Formula("cosh(sqrt(lambda)*$L)+sqrt(lambda)*sinh(sqrt(lambda)*$L)")->cmp, 7);
#WEIGHTED_ANS(Formula("-coth(sqrt(lambda)*$L)")->cmp, 7);
#WEIGHTED_ANS( checkbox_cmp( $mc->correct_ans() ), 1);
#WEIGHTED_ANS(Compute("0")->cmp, 1);
#
### Case 3 less than zero - 40% of problem
#WEIGHTED_ANS($greaterzero->cmp, 6);
#WEIGHTED_ANS(Formula($simplify,"B*sqrt(lambda)")->cmp, 6);
#WEIGHTED_ANS(Formula("(A+B*sqrt(lambda))*cos(sqrt(lambda)*$L)+(B-A*sqrt(lambda))*sin(sqrt(lambda)*$L)")->cmp, 6);
#WEIGHTED_ANS(Formula("cos(sqrt(lambda)*$L)-sqrt(lambda)*sin(sqrt(lambda)*$L)")->cmp, 6);
#WEIGHTED_ANS(Formula("cot(sqrt(lambda)*$L)")->cmp, 6);
#WEIGHTED_ANS($eigenvalues[$L]->cmp(ordered=>1), 10);
#
### Solution - 30 %
#WEIGHTED_ANS($eigenfunctions->cmp(ordered=>1), 28);
#WEIGHTED_ANS($order->cmp(ordered=>1), 2);

COMMENT("Finding eigenvalues and eigenfunctions of a Sturm-Liouville boundary value problem.  Requires high precision decimal answers.");

ENDDOCUMENT();        
